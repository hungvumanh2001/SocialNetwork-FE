{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { environment } from \"../../environments/environment\";\nimport { BehaviorSubject, map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_URL = environment.apiUrl;\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.update = new EventEmitter();\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    login(username, password) {\n      return this.httpClient.post(API_URL + 'login', {\n        username,\n        password\n      }).pipe(map(user => {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return user;\n      }));\n    }\n\n    logout() {\n      localStorage.removeItem('currentUser');\n      localStorage.removeItem('USERNAME');\n      localStorage.removeItem('ROLE');\n      localStorage.removeItem('ACCESS_TOKEN');\n      localStorage.removeItem('ID');\n      localStorage.removeItem('FULLNAME');\n      localStorage.removeItem('AVATAR');\n    }\n\n    register(user) {\n      return this.httpClient.post(API_URL + 'register', user);\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}