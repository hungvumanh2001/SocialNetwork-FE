{"ast":null,"code":"import { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/authentication.service\";\nimport * as i2 from \"@angular/router\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(authenticationService, router) {\n      this.authenticationService = authenticationService;\n      this.router = router;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(tap(event => {\n        if (event instanceof HttpResponse) {// do stuff with response if you want\n        }\n      }, err => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            this.authenticationService.logout();\n            this.router.navigate(['/']);\n          } else if (err.status === 403) {\n            this.router.navigate(['/']);\n          }\n        }\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.Router));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}